{"is_source_file": true, "format": "C++", "description": "Test suite for file monitoring functionalities, including verification of file existence, symbolic links, and concurrent file operations.", "external_files": ["<gtest/gtest.h>", "<sys/stat.h>", "<fcntl.h>", "<unistd.h>", "<fstream>", "<filesystem>", "<thread>", "<atomic>", "../src/path_utils.hpp"], "external_methods": ["stat()", "lstat()", "S_ISREG()", "S_ISLNK()", "create_directory()", "create_symlink()", "remove_all()", "EXPECT_EQ()", "ASSERT_EQ()", "ASSERT_NE()", "ASSERT_TRUE()"], "published": [], "classes": [{"name": "FileMonitoringTest", "description": "Test fixture class for setting up and tearing down file system objects for testing file monitoring functionalities."}], "methods": [{"name": "struct:stat stat_file(const std::filesystem::path & path)", "description": "Helper method to perform stat() on a file path and return its stat structure, asserting success.", "scope": "FileMonitoringTest", "scopeKind": "class"}, {"name": "void SetUp()", "description": "Creates test directory, files, and symbolic links before each test.", "scope": "FileMonitoringTest", "scopeKind": "class"}, {"name": "void TearDown()", "description": "Removes test directory and all its contents after each test.", "scope": "FileMonitoringTest", "scopeKind": "class"}, {"name": "TEST_F(FileMonitoringTest,ConcurrentFileOperations)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "TEST_F(FileMonitoringTest,ExistingFileValidation)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "TEST_F(FileMonitoringTest,NonExistentFileValidation)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "TEST_F(FileMonitoringTest,SymbolicLinkValidation)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "__anon6b58ad730102()", "scope": "TEST_F", "scopeKind": "function", "description": "unavailable"}], "calls": ["stat()", "lstat()", "create_directory()", "create_symlink()", "remove_all()", "EXPECT_EQ()", "ASSERT_EQ()", "ASSERT_NE()", "ASSERT_TRUE()"], "search-terms": ["file monitoring", "symbolic link test", "file stat validation", "concurrent file access", "test fixture for files", "test_file_monitoring.cpp"], "state": 2, "file_id": 18, "knowledge_revision": 51, "git_revision": "06eb75e40164864b88d77b971a4a95be232768ca", "ctags": [{"_type": "tag", "name": "FileMonitoringTest", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_file_monitoring.cpp", "pattern": "/^class FileMonitoringTest : public ::testing::Test {$/", "file": true, "language": "C++", "kind": "class"}, {"_type": "tag", "name": "SetUp", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_file_monitoring.cpp", "pattern": "/^    void SetUp() override {$/", "file": true, "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "()", "scope": "FileMonitoringTest", "scopeKind": "class"}, {"_type": "tag", "name": "TEST_F", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_file_monitoring.cpp", "pattern": "/^TEST_F(FileMonitoringTest, ConcurrentFileOperations) {$/", "language": "C++", "kind": "function", "signature": "(FileMonitoringTest,ConcurrentFileOperations)"}, {"_type": "tag", "name": "TEST_F", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_file_monitoring.cpp", "pattern": "/^TEST_F(FileMonitoringTest, ExistingFileValidation) {$/", "language": "C++", "kind": "function", "signature": "(FileMonitoringTest,ExistingFileValidation)"}, {"_type": "tag", "name": "TEST_F", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_file_monitoring.cpp", "pattern": "/^TEST_F(FileMonitoringTest, NonExistentFileValidation) {$/", "language": "C++", "kind": "function", "signature": "(FileMonitoringTest,NonExistentFileValidation)"}, {"_type": "tag", "name": "TEST_F", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_file_monitoring.cpp", "pattern": "/^TEST_F(FileMonitoringTest, SymbolicLinkValidation) {$/", "language": "C++", "kind": "function", "signature": "(FileMonitoringTest,SymbolicLinkValidation)"}, {"_type": "tag", "name": "TearDown", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_file_monitoring.cpp", "pattern": "/^    void TearDown() override {$/", "file": true, "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "()", "scope": "FileMonitoringTest", "scopeKind": "class"}, {"_type": "tag", "name": "__anon6b58ad730102", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_file_monitoring.cpp", "pattern": "/^        threads.emplace_back([&, i]() {$/", "file": true, "language": "C++", "kind": "function", "signature": "() ", "scope": "TEST_F", "scopeKind": "function"}, {"_type": "tag", "name": "existing_file", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_file_monitoring.cpp", "pattern": "/^    std::filesystem::path existing_file;$/", "file": true, "language": "C++", "typeref": "typename:std::filesystem::path", "kind": "member", "scope": "FileMonitoringTest", "scopeKind": "class"}, {"_type": "tag", "name": "nonexistent_file", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_file_monitoring.cpp", "pattern": "/^    std::filesystem::path nonexistent_file;$/", "file": true, "language": "C++", "typeref": "typename:std::filesystem::path", "kind": "member", "scope": "FileMonitoringTest", "scopeKind": "class"}, {"_type": "tag", "name": "stat_file", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_file_monitoring.cpp", "pattern": "/^    struct stat stat_file(const std::filesystem::path& path) {$/", "file": true, "language": "C++", "typeref": "struct:stat", "kind": "function", "signature": "(const std::filesystem::path & path)", "scope": "FileMonitoringTest", "scopeKind": "class"}, {"_type": "tag", "name": "symlink_file", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_file_monitoring.cpp", "pattern": "/^    std::filesystem::path symlink_file;$/", "file": true, "language": "C++", "typeref": "typename:std::filesystem::path", "kind": "member", "scope": "FileMonitoringTest", "scopeKind": "class"}, {"_type": "tag", "name": "test_dir", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_file_monitoring.cpp", "pattern": "/^    std::filesystem::path test_dir;$/", "file": true, "language": "C++", "typeref": "typename:std::filesystem::path", "kind": "member", "scope": "FileMonitoringTest", "scopeKind": "class"}], "hash": "33b9b7b5253f49c8ff4e2b532a183828", "format-version": 4, "code-base-name": "filetrace", "filename": "tests/test_file_monitoring.cpp", "fields": [{"name": "std::filesystem::path existing_file", "scope": "FileMonitoringTest", "scopeKind": "class", "description": "unavailable"}, {"name": "std::filesystem::path nonexistent_file", "scope": "FileMonitoringTest", "scopeKind": "class", "description": "unavailable"}, {"name": "std::filesystem::path symlink_file", "scope": "FileMonitoringTest", "scopeKind": "class", "description": "unavailable"}, {"name": "std::filesystem::path test_dir", "scope": "FileMonitoringTest", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"51": "06eb75e40164864b88d77b971a4a95be232768ca"}]}