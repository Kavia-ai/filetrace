{"is_source_file": true, "format": "C++", "description": "This source file contains unit tests for thread termination and hierarchy management in a directory tree structure, using Google Test framework. It tests thread creation, synchronization, nested thread spawning, thread state tracking, and exception handling, verifying that file operations are correctly recorded in the DirectoryTree object.", "external_files": ["gtest/gtest.h", "directory_tree.hpp"], "external_methods": ["::testing::Test", "EXPECT_TRUE", "ASSERT_*", "std::thread", "std::this_thread::sleep_for", "DirectoryTree::insert_file", "DirectoryTree::generate_html"], "published": [], "classes": [{"name": "ThreadTerminationTest", "description": "A test fixture class for testing thread termination and hierarchy management within a directory tree."}], "methods": [{"name": "void SetUp()", "description": "Initializes the DirectoryTree object and resets thread control flag before each test.", "scope": "ThreadTerminationTest", "scopeKind": "class"}, {"name": "void TearDown()", "description": "Joins all active threads and cleans up after each test.", "scope": "ThreadTerminationTest", "scopeKind": "class"}, {"name": "pid_t get_thread_id()", "description": "Returns a pseudo-unique identifier for the current thread, cast to pid_t.", "scope": "ThreadTerminationTest", "scopeKind": "class"}, {"name": "TEST_F(ThreadTerminationTest,TestAbnormalThreadTermination)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "TEST_F(ThreadTerminationTest,TestCleanupOnThreadExit)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "TEST_F(ThreadTerminationTest,TestMultipleThreadTermination)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "TEST_F(ThreadTerminationTest,TestNestedThreadHierarchy)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "TEST_F(ThreadTerminationTest,TestThreadStateTracking)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "__anon1052624f0102()", "scope": "TEST_F", "scopeKind": "function", "description": "unavailable"}, {"name": "__anon1052624f0202()", "scope": "TEST_F", "scopeKind": "function", "description": "unavailable"}, {"name": "__anon1052624f0302()", "scope": "TEST_F", "scopeKind": "function", "description": "unavailable"}, {"name": "__anon1052624f0402()", "scope": "TEST_F::__anon1052624f0302", "scopeKind": "function", "description": "unavailable"}, {"name": "__anon1052624f0502()", "scope": "TEST_F", "scopeKind": "function", "description": "unavailable"}, {"name": "__anon1052624f0602()", "scope": "TEST_F", "scopeKind": "function", "description": "unavailable"}], "calls": ["tree.insert_file", "tree.generate_html", "worker.join", "parent.join", "child.join"], "search-terms": ["thread management", "test thread hierarchy", "directory tree file recording", "multithreaded file operations", "Google Test thread testing"], "state": 2, "file_id": 19, "knowledge_revision": 41, "git_revision": "06eb75e40164864b88d77b971a4a95be232768ca", "ctags": [{"_type": "tag", "name": "SetUp", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_thread_termination.cpp", "pattern": "/^    void SetUp() override {$/", "file": true, "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "()", "scope": "ThreadTerminationTest", "scopeKind": "class"}, {"_type": "tag", "name": "TEST_F", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_thread_termination.cpp", "pattern": "/^TEST_F(ThreadTerminationTest, TestAbnormalThreadTermination) {$/", "language": "C++", "kind": "function", "signature": "(ThreadTerminationTest,TestAbnormalThreadTermination)"}, {"_type": "tag", "name": "TEST_F", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_thread_termination.cpp", "pattern": "/^TEST_F(ThreadTerminationTest, TestCleanupOnThreadExit) {$/", "language": "C++", "kind": "function", "signature": "(ThreadTerminationTest,TestCleanupOnThreadExit)"}, {"_type": "tag", "name": "TEST_F", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_thread_termination.cpp", "pattern": "/^TEST_F(ThreadTerminationTest, TestMultipleThreadTermination) {$/", "language": "C++", "kind": "function", "signature": "(ThreadTerminationTest,TestMultipleThreadTermination)"}, {"_type": "tag", "name": "TEST_F", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_thread_termination.cpp", "pattern": "/^TEST_F(ThreadTerminationTest, TestNestedThreadHierarchy) {$/", "language": "C++", "kind": "function", "signature": "(ThreadTerminationTest,TestNestedThreadHierarchy)"}, {"_type": "tag", "name": "TEST_F", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_thread_termination.cpp", "pattern": "/^TEST_F(ThreadTerminationTest, TestThreadStateTracking) {$/", "language": "C++", "kind": "function", "signature": "(ThreadTerminationTest,TestThreadStateTracking)"}, {"_type": "tag", "name": "TearDown", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_thread_termination.cpp", "pattern": "/^    void TearDown() override {$/", "file": true, "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "()", "scope": "ThreadTerminationTest", "scopeKind": "class"}, {"_type": "tag", "name": "ThreadTerminationTest", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_thread_termination.cpp", "pattern": "/^class ThreadTerminationTest : public ::testing::Test {$/", "file": true, "language": "C++", "kind": "class"}, {"_type": "tag", "name": "__anon1052624f0102", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_thread_termination.cpp", "pattern": "/^    std::thread worker([this]() {$/", "file": true, "language": "C++", "kind": "function", "signature": "() ", "scope": "TEST_F", "scopeKind": "function"}, {"_type": "tag", "name": "__anon1052624f0202", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_thread_termination.cpp", "pattern": "/^        workers.emplace_back([this, i]() {$/", "file": true, "language": "C++", "kind": "function", "signature": "() ", "scope": "TEST_F", "scopeKind": "function"}, {"_type": "tag", "name": "__anon1052624f0302", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_thread_termination.cpp", "pattern": "/^    std::thread parent([this]() {$/", "file": true, "language": "C++", "kind": "function", "signature": "() ", "scope": "TEST_F", "scopeKind": "function"}, {"_type": "tag", "name": "__anon1052624f0402", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_thread_termination.cpp", "pattern": "/^            children.emplace_back([this, i]() {$/", "file": true, "language": "C++", "kind": "function", "signature": "() ", "scope": "TEST_F::__anon1052624f0302", "scopeKind": "function"}, {"_type": "tag", "name": "__anon1052624f0502", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_thread_termination.cpp", "pattern": "/^    std::thread worker([this, &thread_started, &thread_finished]() {$/", "file": true, "language": "C++", "kind": "function", "signature": "() ", "scope": "TEST_F", "scopeKind": "function"}, {"_type": "tag", "name": "__anon1052624f0602", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_thread_termination.cpp", "pattern": "/^    std::thread worker([this, &exception_caught]() {$/", "file": true, "language": "C++", "kind": "function", "signature": "() ", "scope": "TEST_F", "scopeKind": "function"}, {"_type": "tag", "name": "get_thread_id", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_thread_termination.cpp", "pattern": "/^    pid_t get_thread_id() {$/", "file": true, "language": "C++", "typeref": "typename:pid_t", "kind": "function", "signature": "()", "scope": "ThreadTerminationTest", "scopeKind": "class"}, {"_type": "tag", "name": "should_stop", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_thread_termination.cpp", "pattern": "/^    std::atomic<bool> should_stop{false};$/", "file": true, "language": "C++", "typeref": "typename:std::atomic<bool>", "kind": "member", "scope": "ThreadTerminationTest", "scopeKind": "class"}, {"_type": "tag", "name": "threads", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_thread_termination.cpp", "pattern": "/^    std::vector<std::thread> threads;$/", "file": true, "language": "C++", "typeref": "typename:std::vector<std::thread>", "kind": "member", "scope": "ThreadTerminationTest", "scopeKind": "class"}, {"_type": "tag", "name": "tree", "path": "/home/kavia/workspace/cmb095212e/filetrace/tests/test_thread_termination.cpp", "pattern": "/^    DirectoryTree tree;$/", "file": true, "language": "C++", "typeref": "typename:DirectoryTree", "kind": "member", "scope": "ThreadTerminationTest", "scopeKind": "class"}], "hash": "4127c7313f7e47d2f589f589d96816dc", "format-version": 4, "code-base-name": "filetrace", "filename": "tests/test_thread_termination.cpp", "fields": [{"name": "std::atomic<bool> should_stop", "scope": "ThreadTerminationTest", "scopeKind": "class", "description": "unavailable"}, {"name": "std::vector<std::thread> threads", "scope": "ThreadTerminationTest", "scopeKind": "class", "description": "unavailable"}, {"name": "DirectoryTree tree", "scope": "ThreadTerminationTest", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"41": "06eb75e40164864b88d77b971a4a95be232768ca"}]}