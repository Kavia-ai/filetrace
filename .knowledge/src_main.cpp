{"is_source_file": true, "format": "C++", "description": "Main source file for a thread-aware file access tracing tool, implementing process/thread tracking, system call interception, file operation tracking, and HTML report generation.", "external_files": ["path_utils.hpp", "directory_tree.hpp", "html_generator.hpp", "logger.hpp"], "external_methods": ["path_utils::normalize_path", "path_utils::is_within_directory", "path_utils::get_current_directory", "HtmlGenerator::generate_html_report", "Logger::debug", "Logger::error", "Logger::info", "Logger::warning"], "published": ["FILETRACE_VERSION", "ProcessType", "ThreadInfo", "FileOperation"], "classes": [{"name": "ProcessType", "description": "Enum class distinguishing between processes and threads."}, {"name": "ThreadInfo", "description": "Structure storing detailed information about a thread or process, including hierarchy, status, and creation time."}, {"name": "FileOperation", "description": "Structure capturing details of file-related system calls, including path, process info, sequence, and thread identifiers."}], "methods": [{"name": "std::string get_thread_name(pid_t tid)", "description": "Retrieves the thread or process name from /proc/[tid]/comm.", "scope": "", "scopeKind": ""}, {"name": "void handle_thread_creation(pid_t parent_pid,pid_t thread_id,bool is_process=false)", "description": "Manages creation and registration of new threads/processes, updating parent relationships.", "scope": "", "scopeKind": ""}, {"name": "void handle_thread_exit(pid_t thread_id,int exit_status=0)", "description": "Marks a thread/process as inactive, handles cleanup, and recursively its children if any.", "scope": "", "scopeKind": ""}, {"name": "std::string resolve_fd_path(pid_t pid,int fd)", "description": "Resolves the filesystem path linked to a file descriptor for a given process.", "scope": "", "scopeKind": ""}, {"name": "std::string resolve_relative_path(const std::string & base_path,const std::string & relative_path)", "description": "Resolves relative paths based on the directory obtained from /proc/[pid]/fd.", "scope": "", "scopeKind": ""}, {"name": "std::string read_process_string(pid_t pid,unsigned long addr)", "description": "Safely reads a null-terminated string from another process's memory via ptrace.", "scope": "", "scopeKind": ""}, {"name": "void handle_syscall_entry(pid_t pid,const user_regs_struct & regs,std::vector<FileOperation> & operations,const std::string & base_dir=\"\")", "description": "Intercepts system call entries, manages process/thread creation, exit, and tracks file open/exec calls.", "scope": "", "scopeKind": ""}, {"name": "void generate_html_output(const std::vector<FileOperation> & operations,const std::string & output_file)", "description": "Creates an HTML report visualizing the file operations using a directory tree.", "scope": "", "scopeKind": ""}, {"name": "bool validate_output_file(const std::string & path)", "description": "Checks if an output file path is valid, accessible, and writable.", "scope": "", "scopeKind": ""}, {"name": "bool validate_command(const std::string & command)", "description": "Verifies that the specified command exists and is executable either directly or in PATH.", "scope": "", "scopeKind": ""}, {"name": "void display_help(const cxxopts::Options & options)", "description": "Outputs help message with usage examples.", "scope": "", "scopeKind": ""}, {"name": "int main(int argc,char * argv[])", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["ptrace", "waitpid", "kill", "stat", "getenv", "execvp", "raise", "sigemptyset", "sigaddset"], "search-terms": ["thread-aware file tracing", "process and thread hierarchy", "ptrace system call interception", "file operation logging", "HTML report generation", "clone/fork process management", "system call handling", "file descriptor resolution", "multithreaded ptrace handling"], "state": 2, "file_id": 16, "knowledge_revision": 50, "git_revision": "06eb75e40164864b88d77b971a4a95be232768ca", "ctags": [{"_type": "tag", "name": "FILETRACE_VERSION", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^#define FILETRACE_VERSION /", "file": true, "language": "C++", "kind": "macro"}, {"_type": "tag", "name": "FileOperation", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^struct FileOperation {$/", "file": true, "language": "C++", "kind": "struct"}, {"_type": "tag", "name": "PROCESS", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^    PROCESS,$/", "file": true, "language": "C++", "kind": "enumerator", "scope": "ProcessType", "scopeKind": "enum"}, {"_type": "tag", "name": "ProcessType", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^enum class ProcessType {$/", "file": true, "language": "C++", "kind": "enum"}, {"_type": "tag", "name": "THREAD", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^    THREAD$/", "file": true, "language": "C++", "kind": "enumerator", "scope": "ProcessType", "scopeKind": "enum"}, {"_type": "tag", "name": "ThreadInfo", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^struct ThreadInfo {$/", "file": true, "language": "C++", "kind": "struct"}, {"_type": "tag", "name": "__anon34e3bfa9010a", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^    union {$/", "file": true, "language": "C++", "kind": "union", "scope": "read_process_string", "scopeKind": "function"}, {"_type": "tag", "name": "active", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^    bool active;$/", "file": true, "language": "C++", "typeref": "typename:bool", "kind": "member", "scope": "ThreadInfo", "scopeKind": "struct"}, {"_type": "tag", "name": "chars", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^        char chars[sizeof(long)];$/", "file": true, "language": "C++", "typeref": "typename:char[]", "kind": "member", "scope": "read_process_string::__anon34e3bfa9010a", "scopeKind": "union"}, {"_type": "tag", "name": "child_processes", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^    std::vector<pid_t> child_processes;$/", "file": true, "language": "C++", "typeref": "typename:std::vector<pid_t>", "kind": "member", "scope": "ThreadInfo", "scopeKind": "struct"}, {"_type": "tag", "name": "child_threads", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^    std::vector<pid_t> child_threads;$/", "file": true, "language": "C++", "typeref": "typename:std::vector<pid_t>", "kind": "member", "scope": "ThreadInfo", "scopeKind": "struct"}, {"_type": "tag", "name": "creation_time", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^    time_t creation_time;$/", "file": true, "language": "C++", "typeref": "typename:time_t", "kind": "member", "scope": "ThreadInfo", "scopeKind": "struct"}, {"_type": "tag", "name": "display_help", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^void display_help(const cxxopts::Options& options) {$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(const cxxopts::Options & options)"}, {"_type": "tag", "name": "exit_status", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^    int exit_status;$/", "file": true, "language": "C++", "typeref": "typename:int", "kind": "member", "scope": "ThreadInfo", "scopeKind": "struct"}, {"_type": "tag", "name": "generate_html_output", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^void generate_html_output(const std::vector<FileOperation>& operations, const std::string& outpu/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(const std::vector<FileOperation> & operations,const std::string & output_file)"}, {"_type": "tag", "name": "get_thread_name", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^std::string get_thread_name(pid_t tid) {$/", "language": "C++", "typeref": "typename:std::string", "kind": "function", "signature": "(pid_t tid)"}, {"_type": "tag", "name": "handle_syscall_entry", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^void handle_syscall_entry(pid_t pid, const user_regs_struct& regs, std::vector<FileOperation>& o/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(pid_t pid,const user_regs_struct & regs,std::vector<FileOperation> & operations,const std::string & base_dir=\"\")"}, {"_type": "tag", "name": "handle_thread_creation", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^void handle_thread_creation(pid_t parent_pid, pid_t thread_id, bool is_process = false) {$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(pid_t parent_pid,pid_t thread_id,bool is_process=false)"}, {"_type": "tag", "name": "handle_thread_exit", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^void handle_thread_exit(pid_t thread_id, int exit_status = 0) {$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(pid_t thread_id,int exit_status=0)"}, {"_type": "tag", "name": "is_actual_open", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^    bool is_actual_open;  \\/\\/ Distinguish between actual opens and execve lookups$/", "file": true, "language": "C++", "typeref": "typename:bool", "kind": "member", "scope": "FileOperation", "scopeKind": "struct"}, {"_type": "tag", "name": "main", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^int main(int argc, char* argv[]) try {$/", "language": "C++", "typeref": "typename:int", "kind": "function", "signature": "(int argc,char * argv[])"}, {"_type": "tag", "name": "name", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^    std::string name;$/", "file": true, "language": "C++", "typeref": "typename:std::string", "kind": "member", "scope": "ThreadInfo", "scopeKind": "struct"}, {"_type": "tag", "name": "parent_pid", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^    pid_t parent_pid;$/", "file": true, "language": "C++", "typeref": "typename:pid_t", "kind": "member", "scope": "ThreadInfo", "scopeKind": "struct"}, {"_type": "tag", "name": "path", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^    std::string path;$/", "file": true, "language": "C++", "typeref": "typename:std::string", "kind": "member", "scope": "FileOperation", "scopeKind": "struct"}, {"_type": "tag", "name": "pid", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^    pid_t pid;$/", "file": true, "language": "C++", "typeref": "typename:pid_t", "kind": "member", "scope": "FileOperation", "scopeKind": "struct"}, {"_type": "tag", "name": "process_type", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^    ProcessType process_type;$/", "file": true, "language": "C++", "typeref": "typename:ProcessType", "kind": "member", "scope": "ThreadInfo", "scopeKind": "struct"}, {"_type": "tag", "name": "read_process_string", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^std::string read_process_string(pid_t pid, unsigned long addr) {$/", "language": "C++", "typeref": "typename:std::string", "kind": "function", "signature": "(pid_t pid,unsigned long addr)"}, {"_type": "tag", "name": "resolve_fd_path", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^std::string resolve_fd_path(pid_t pid, int fd) {$/", "language": "C++", "typeref": "typename:std::string", "kind": "function", "signature": "(pid_t pid,int fd)"}, {"_type": "tag", "name": "resolve_relative_path", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^std::string resolve_relative_path(const std::string& base_path, const std::string& relative_path/", "language": "C++", "typeref": "typename:std::string", "kind": "function", "signature": "(const std::string & base_path,const std::string & relative_path)"}, {"_type": "tag", "name": "sequence", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^    int sequence;$/", "file": true, "language": "C++", "typeref": "typename:int", "kind": "member", "scope": "FileOperation", "scopeKind": "struct"}, {"_type": "tag", "name": "thread_id", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^    pid_t thread_id;$/", "file": true, "language": "C++", "typeref": "typename:pid_t", "kind": "member", "scope": "FileOperation", "scopeKind": "struct"}, {"_type": "tag", "name": "thread_id", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^    pid_t thread_id;$/", "file": true, "language": "C++", "typeref": "typename:pid_t", "kind": "member", "scope": "ThreadInfo", "scopeKind": "struct"}, {"_type": "tag", "name": "thread_map", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^std::map<pid_t, ThreadInfo> thread_map;$/", "language": "C++", "typeref": "typename:std::map<pid_t,ThreadInfo>", "kind": "variable"}, {"_type": "tag", "name": "thread_map_mutex", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^std::mutex thread_map_mutex;$/", "language": "C++", "typeref": "typename:std::mutex", "kind": "variable"}, {"_type": "tag", "name": "thread_name", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^    std::string thread_name;$/", "file": true, "language": "C++", "typeref": "typename:std::string", "kind": "member", "scope": "FileOperation", "scopeKind": "struct"}, {"_type": "tag", "name": "val", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^        long val;$/", "file": true, "language": "C++", "typeref": "typename:long", "kind": "member", "scope": "read_process_string::__anon34e3bfa9010a", "scopeKind": "union"}, {"_type": "tag", "name": "validate_command", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^bool validate_command(const std::string& command) {$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & command)"}, {"_type": "tag", "name": "validate_output_file", "path": "/home/kavia/workspace/cmb095212e/filetrace/src/main.cpp", "pattern": "/^bool validate_output_file(const std::string& path) {$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const std::string & path)"}], "hash": "88b1a821185433b42c2218fbe77cdc08", "format-version": 4, "code-base-name": "filetrace", "filename": "src/main.cpp", "fields": [{"name": "bool active", "scope": "ThreadInfo", "scopeKind": "struct", "description": "unavailable"}, {"name": "char[] chars", "scope": "read_process_string::__anon34e3bfa9010a", "scopeKind": "union", "description": "unavailable"}, {"name": "std::vector<pid_t> child_processes", "scope": "ThreadInfo", "scopeKind": "struct", "description": "unavailable"}, {"name": "std::vector<pid_t> child_threads", "scope": "ThreadInfo", "scopeKind": "struct", "description": "unavailable"}, {"name": "time_t creation_time", "scope": "ThreadInfo", "scopeKind": "struct", "description": "unavailable"}, {"name": "int exit_status", "scope": "ThreadInfo", "scopeKind": "struct", "description": "unavailable"}, {"name": "bool is_actual_open", "scope": "FileOperation", "scopeKind": "struct", "description": "unavailable"}, {"name": "std::string name", "scope": "ThreadInfo", "scopeKind": "struct", "description": "unavailable"}, {"name": "pid_t parent_pid", "scope": "ThreadInfo", "scopeKind": "struct", "description": "unavailable"}, {"name": "std::string path", "scope": "FileOperation", "scopeKind": "struct", "description": "unavailable"}, {"name": "pid_t pid", "scope": "FileOperation", "scopeKind": "struct", "description": "unavailable"}, {"name": "ProcessType process_type", "scope": "ThreadInfo", "scopeKind": "struct", "description": "unavailable"}, {"name": "int sequence", "scope": "FileOperation", "scopeKind": "struct", "description": "unavailable"}, {"name": "pid_t thread_id", "scope": "FileOperation", "scopeKind": "struct", "description": "unavailable"}, {"name": "std::map<pid_t,ThreadInfo> thread_map", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "std::mutex thread_map_mutex", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "std::string thread_name", "scope": "FileOperation", "scopeKind": "struct", "description": "unavailable"}, {"name": "long val", "scope": "read_process_string::__anon34e3bfa9010a", "scopeKind": "union", "description": "unavailable"}], "revision_history": [{"50": "06eb75e40164864b88d77b971a4a95be232768ca"}]}