{"is_source_file": true, "format": "C++", "description": "Unit tests for thread termination behavior using Google Test framework, including cleanup, tracking, and abnormal termination scenarios with a directory tree structure.", "external_files": ["directory_tree.hpp"], "external_methods": [], "published": [], "classes": [{"name": "ThreadTerminationTest", "description": "Test fixture class for managing thread-related unit tests."}], "methods": [{"name": "SetUp", "description": "Initial setup method that prepares the test environment, creating a DirectoryTree instance and resetting the 'should_stop' flag."}, {"name": "TearDown", "description": "Cleanup method that stops threads and ensures safe termination."}, {"name": "get_thread_id", "description": "Returns the thread ID as a pid_t by hashing the current thread's ID."}, {"name": "TestCleanupOnThreadExit", "description": "Tests if file operations are correctly recorded when a thread exits normally."}, {"name": "TestMultipleThreadTermination", "description": "Tests the handling of multiple threads that perform file operations concurrently."}, {"name": "TestNestedThreadHierarchy", "description": "Tests the ability to handle nested thread operations and ensure all operations are recorded."}, {"name": "TestThreadStateTracking", "description": "Tests the tracking of thread state from start to finish using atomic flags."}, {"name": "TestAbnormalThreadTermination", "description": "Tests the handling of exceptions in threads and verifies that operations are recorded prior to termination."}], "calls": ["std::this_thread::sleep_for", "DirectoryTree::insert_file", "DirectoryTree::generate_html"], "search-terms": ["ThreadTerminationTest", "thread exit cleanup", "nested thread operations", "thread state tracking", "abnormal thread termination"], "state": 2, "ctags": [], "filename": "/app/data/T0002/43087/Kavia-ai/filetrace/tests/test_thread_termination.cpp", "hash": "4127c7313f7e47d2f589f589d96816dc", "format-version": 3, "code-base-name": "b0134v6"}